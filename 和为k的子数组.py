"""
给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。

示例 1 :

输入:nums = [1,1,1], k = 2
输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。
说明 :

数组的长度为 [1, 20,000]。
数组中元素的范围是 [-1000, 1000] ，且整数 k 的范围是 [-1e7, 1e7]。


利用前缀和   要把看似没用的保留下来 利用字典
字第里面是{前缀和，前缀和的次数}
[1,0,2,1,1]  2
例如到索引为2  此时数字为2  和为3  减去k=2  前面的和为1的次数就是2


思想就是 我知道前1 2 3 4 5 。。。 n的和（n个数）   现在知道前m（m>n)的和
    如果前m的和 减去 k得到的数 在前面的n的和（n个数）里面存在j个（假设有一个是前4项的和）  那就对应的有
    j个连续数组(其中一个是[5:m])的和为k
"""
def slove(nums,k):
    total_sum = 0
    dic = {0:1}
    result= 0
    for num in nums:
        total_sum+=num
        result += dic.get(total_sum-k,0)
        dic[total_sum] = dic.get(total_sum,0)+1
    print(dic)
    return result

print(slove([1,1,1,2], 3))