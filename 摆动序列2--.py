"""
如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 摆动序列。 第一个差（如果存在的话）可能是正数或负数。少
于两个元素的序列也是摆动序列。例如， [1,7,4,9,2,5] 是一个摆动序列，因为差值 (6,-3,5,-7,3) 是正负交替出现的。
相反, [1,4,7,2,5] 和 [1,7,4,5,5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。

给定一个整数序列，返回作为摆动序列的最长子序列的长度。 通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。

"""


def wiggleMaxLength( nums) :
    n = len(nums)
    if n == 1:
        return n
    '''
    对于一段递增或递减的序列，我们只需要保留两个端点，中间节点都不计入结果
    pre: 记录前一段的正负情况
    tmp：记录当前一段的正负情况
    当pre与tmp异号时更新res和pre
    '''

    pre = nums[1] - nums[0]
    res = 1 if pre == 0 else 2

    for i in range(2, n):
        tmp = nums[i] - nums[i - 1]
        # pre等于0是为了包括pre初始化为0的情况，pre非0后不会再次等于0
        # 因为tmp为0时不会进入if，也就不会更新pre
        if (tmp < 0 and pre >= 0) or (tmp > 0 and pre <= 0):
            res += 1
            pre = tmp

    return res

