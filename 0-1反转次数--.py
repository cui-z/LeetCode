"""
一个只包含'0'和'1'的字符串，如果所有'1'都在'0'的后面，那么它就是单调递增的。
给你一个由'0'和'1'组成的字符串，你可以把其中的若干'0'翻转为'1'，把若干'1'翻转成'0'。请问最少需要翻转几次，才能把一个'0'、'1'组成的字符串变成单调递增的。
例如输入字符串"00110"，我们只需要把最后一个字符'0'翻转成'1'，就得到单调递增的字符串"00111"，因此输出1。



思路：  最优解一定是这样 在某一个位置 之前全为0 后面全为1  也有可能位置再开始 也有可能在结束  算出位置左边1的个数和右边0的个数  相加就行
前缀和。记录前i个中1的数量，那么len(S)-i中0的数量则为​​len(S)-i-(tmp[-1]-tmp[i])​​，以i为分割，需要将前面的1换为0，后面的0换成1，取最小值即可
"""

def slove(str):
    #左边1 的个数
    l1=[0]
    for i in str:
        l=int(i)+l1[-1]
        l1.append(l)
    resul=len(str)
    for i in range(len(str)+1):
        r0=len(str)-i-(l1[-1]-l1[i])
        resul=min(resul,l1[i]+r0)
    return resul

print(slove("00110"))
print(slove("010110"))
print(slove("00011000"))

